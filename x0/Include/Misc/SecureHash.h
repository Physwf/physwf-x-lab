#pragma once

#include "CoreTypes.h"
#include "HAL/UnrealMemory.h"
#include "Containers/UnrealString.h"
#include "Containers/Map.h"
#include "Containers/StringConv.h"
//#include "Stats/Stats.h"
//#include "Async/AsyncWork.h"
//#include "Serialization/BufferReader.h"


#include "X0.h"

/** Stores an SHA hash generated by FSHA1. */
class X0_API FSHAHash
{
public:
	uint8 Hash[20];

	FSHAHash()
	{
		FMemory::Memset(Hash, 0, sizeof(Hash));
	}

	inline FString ToString() const
	{
		return BytesToHex((const uint8*)Hash, sizeof(Hash));
	}
	void FromString(const FString& Src)
	{
		check(Src.Len() == 40);
		HexToBytes(Src, Hash);
	}

	friend bool operator==(const FSHAHash& X, const FSHAHash& Y)
	{
		return FMemory::Memcmp(&X.Hash, &Y.Hash, sizeof(X.Hash)) == 0;
	}

	friend bool operator!=(const FSHAHash& X, const FSHAHash& Y)
	{
		return FMemory::Memcmp(&X.Hash, &Y.Hash, sizeof(X.Hash)) != 0;
	}

	//friend CORE_API FArchive& operator<<(FArchive& Ar, FSHAHash& G);

	friend X0_API uint32 GetTypeHash(FSHAHash const& InKey);
};